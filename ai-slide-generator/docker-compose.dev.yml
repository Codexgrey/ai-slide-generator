services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DOCKER_DATABASE_URL}
    env_file:
      - .env
    depends_on:
      - database
      - redis
    restart: on-failure
    command: >
       sh -c "
        until nc -z database 5432; do
          echo '⏳ Waiting for PostgreSQL...';
          sleep 2;
        done &&
        npx prisma migrate dev --name init-$(date +%s) &&
        npm run dev"

  database:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_slides_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d ai_slides_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  studio:
    build:
      context: .
      dockerfile: Dockerfile.dev
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5555:5555"
    command: >
      sh -c "
        until nc -z database 5432; do
          echo '⏳ Waiting for PostgreSQL...';
          sleep 2;
        done &&
        npx prisma studio --port 5555 --browser none"
    depends_on:
      - database
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DOCKER_DATABASE_URL}
      - PRISMA_STUDIO_PORT=5555

volumes:
  postgres_data:
  redis_data: